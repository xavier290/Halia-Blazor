@page "/tools-tools";

@using NovaLaundryAppWebAdminBlazor.Server.Models;
@using NovaLaundryAppWebAdminBlazor.Server.ViewModels;
@inject SweetAlertService Swal

@inject ProtectedLocalStorage localStorage

<PageTitle>Halia || Herramientas</PageTitle>
<div class=" d-flex justify-content-center align-items-center flex-column" style="height:100%; width:100%;">

    <!--Navegacion Por Pesta;as-->
    <div style="width:100%;height:85vh;background-color:white">

        <!--Navegacion (headers)-->
        <ul class="d-none nav nav-tabs" id="myTab" role="tablist">
            <li class="nav-item">
                <a class="nav-link active" id="tab1-tab" data-toggle="tab" href="#tab1" role="tab" aria-controls="tab1" aria-selected="true">Pestaña 1</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" id="tab2-tab" data-toggle="tab" href="#tab2" role="tab" aria-controls="tab2" aria-selected="false">Pestaña 2</a>
            </li>
        </ul>

        <!--TcMain-->
        <div class="tab-content" id="TCMain">

            @if (pestañaActual == 1)
            {
                <!--Menu-->
                <div class="toolsCnt">
                    <div class="toolsElements">
                        <div class="card-tools" style="width:100%">
                            <div class="toolElemnt">
                                <p class="title">Empresas Terceros</p>
                                <a class="btn mt-auto" id="botonEstatus" style="background-color:#add8e6" @onclick="@( e => ConfigUI("EmpresasTerceras","Buscar"))">Ingresar</a>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (pestañaActual == 2)
            {

                <!--Buscador-->
                <div class="tab-pane fade show active tab-pane fade" id="TIBuscar" role="tabpanel" aria-labelledby="tab2-tab">
                    <!-- Botón Volver -->
                    <button class="btn-volver m-1" @onclick="@(e => ConfigUI("Menu",""))" type="button">Volver</button>

                    <!--Search+Button-->
                    <div class="container mt-5">
                        <div class="row justify-content-center">
                            <div class="col-md-6">
                                <form class="form-inline d-flex justify-content-around align-items-center">
                                    <input class="form-control rounded mr-2 rounded-pill" type="text" name="q" placeholder="Buscar..." @bind="@filter">
                                    <button class="btn btn-primary mx-2 rounded-pill d-flex justify-content-around align-items-center " type="button" @onclick="@(e => FuncionesPrincipales())">Buscar <img src="/Search.png" alt="Logo" class="img-fluid mx-2" style="max-width: 25px;"></button>
                                    <button class="btn btn-success mx-2 rounded-pill d-flex justify-content-around align-items-center " type="button" @onclick="@(e => ConfigUI(moduloAux,"Crear"))">Crear <img src="/Create.png" alt="Logo" class="img-fluid rounded-circle mx-2" style="max-width: 25px;"></button>
                                </form>
                            </div>
                        </div>
                    </div>

                    <!--Tabla-->
                    <div class="container mt-3">
                        <div class="row justify-content-center">
                            <div class="col-md-9">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Acciones</th>
                                            @foreach (var header in headers)
                                            {
                                                <th>@header</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var row in rows)
                                        {
                                            <tr>
                                                <td>
                                                    <button class="btn btn-primary" @onclick="() => UpdateEntry(row)">Actualizar</button>
                                                    <button class="btn btn-danger my-0" >Bloquear</button>
                                                </td>
                                                @foreach (var cell in row)
                                                {
                                                    <td>@cell</td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>

            }
            else if (pestañaActual == 3)
            {
                <!--Crear-->
                <div class="tab-pane fade overflow-auto show active w-90" id="TICrear" role="tabpanel" aria-labelledby="tab2-tab">

                    <button class="btn btn-secondary m-1 mb-4" type="button" @onclick="@(e => ConfigUI(moduloAux, "Buscar"))">Volver</button>

                    <div class="col-md-8 w-90">
                        <form>
                            <div class="form-container w-90 p-2">

                                @if(VisibleGeneralUno)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralUno" class="form-label">@LblGeneralUno</label>
                                        <input type="text" class="form-control" id="TxtGeneralUno" @bind="@TxtGeneralUno">
                                    </div>
                                }
                                @if (VisibleGeneralDos)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralDos" class="form-label">@LblGeneralDos</label>
                                        <input type="text" class="form-control" id="TxtGeneralDos" @bind="@TxtGeneralDos">
                                    </div>
                                }
                                @if (VisibleGeneralTres)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralTres" class="form-label">@LblGeneralTres</label>
                                        <input type="text" class="form-control" id="TxtGeneralTres" @bind="@TxtGeneralTres">
                                    </div>
                                }
                                @if (VisibleGeneralCuatro)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralCuatro" class="form-label">@LblGeneralCuatro</label>
                                        <input type="text" class="form-control" id="TxtGeneralCuatro" @bind="@TxtGeneralCuatro">
                                    </div>
                                }
                                @if (VisibleGeneralCinco)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralCinco" class="form-label">@LblGeneralCinco</label>
                                        <input type="text" class="form-control" id="TxtGeneralCinco" @bind="@TxtGeneralCinco">
                                    </div>
                                }
                                @if (VisibleGeneralSeis)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralSeis" class="form-label">@LblGeneralSeis</label>
                                        <input type="text" class="form-control" id="TxtGeneralSeis" @bind="@TxtGeneralSeis">
                                    </div>
                                }
                                @if (VisibleGeneralSiete)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralSiete" class="form-label">@LblGeneralSiete</label>
                                        <input type="text" class="form-control" id="TxtGeneralSiete" @bind="@TxtGeneralSiete">
                                    </div>
                                }
                                @if (VisibleGeneralOcho)
                                {
                                    <div class="col-md-3">
                                        <label for="TxtGeneralOcho" class="form-label" disabled="@VisibleGeneralOcho">@LblGeneralOcho</label>
                                        <input type="text" class="form-control" id="TxtGeneralOcho" disabled="@VisibleGeneralOcho" @bind="@TxtGeneralOcho">
                                    </div>
                                }

                            </div>
                            <button type="button" class="btn btn-primary m-2 float-end" @onclick = "@FuncionesPrincipales">Guardar</button>
                        </form>
                    </div>
                </div>

            }
           

        </div>
    </div>

    <!--Parte de Nombres de seccion-->
    <footer class="bg-secondary d-flex justify-content-center align-items-center  " style="width:100%;height:5vh;color:white">
        <h2>@titulo</h2>
    </footer>
</div>

@code {
    private VMCatalogo vMCatalogo = new VMCatalogo();
    private int pestañaActual = 1;
    private string titulo = "Menú Principal";
    List<string> headers = new List<string>();
    List<List<object>> rows = new List<List<object>>();
    string filter = "";
    string moduloAux = "";
    string opcAux = "";
    private int selectedEntryId;

    //Herremientas UI Generales
    string TxtGeneralUno = "";
    string TxtGeneralDos = "";
    string TxtGeneralTres = "";
    string TxtGeneralCuatro = "";
    string TxtGeneralCinco = "";
    string TxtGeneralSeis = "";
    string TxtGeneralSiete = "";
    string TxtGeneralOcho = "";

    string LblGeneralUno = "";
    string LblGeneralDos = "";
    string LblGeneralTres = "";
    string LblGeneralCuatro = "";
    string LblGeneralCinco = "";
    string LblGeneralSeis = "";
    string LblGeneralSiete = "";
    string LblGeneralOcho = "";

    bool VisibleGeneralUno = false;
    bool VisibleGeneralDos = false;
    bool VisibleGeneralTres = false;
    bool VisibleGeneralCuatro = false;
    bool VisibleGeneralCinco = false;
    bool VisibleGeneralSeis = false;
    bool VisibleGeneralSiete = false;
    bool VisibleGeneralOcho = false;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await ConfigUI("Menu", "");

            StateHasChanged();
        }
    }

    private async Task ConfigUI(string modulo,string opc)
    {
        opcAux = opc;
        moduloAux = modulo;

        switch (modulo)
        {
            case "EmpresasTerceras":

                if (opc == "Buscar")
                {
                    pestañaActual = 2;
                    titulo = "Buscar Empresas Tercerizadas";
                    FuncionesPrincipales();
                }
                else if(opc == "Crear")
                {
                    pestañaActual = 3;
                    titulo = "Crear Empresa Tercerizada";
                    CargarDatos();
                }
                else if(opc == "Modificar")
                {
                    pestañaActual = 3;
                    titulo = "Modificar Empresa Tercerizada";
                    CargarDatos();
                }

                break;

            case "Menu":
                pestañaActual = 1;
                break;
        }

        StateHasChanged();
    }

    private void CargarDatos()
    {
        switch (moduloAux)
        {
            case "EmpresasTerceras":

                LimpiarDatos();
                VisibleGeneralUno = true;
                VisibleGeneralDos = true;
                VisibleGeneralTres = true;
                VisibleGeneralCuatro = true;
                VisibleGeneralCinco = true;

                LblGeneralUno = "Nombre";
                LblGeneralDos = "Nombre Comercial";
                LblGeneralTres = "RUC";
                LblGeneralCuatro = "Dirección";
                LblGeneralCinco = "Telefono";

                if (opcAux == "Modificar")
                {
                    using (HaliabdContext db = new HaliabdContext())
                    {
                        EmpresasTercera empresaTercera = db.EmpresasTerceras.Find(selectedEntryId);

                        TxtGeneralUno = empresaTercera.Nombre;
                        TxtGeneralDos = empresaTercera.NombreComercial;
                        TxtGeneralTres = empresaTercera.Ruc;
                        TxtGeneralCuatro = empresaTercera.Dirección;
                        TxtGeneralCinco = empresaTercera.Telefono;
                    }
                }

                break;
        }
        StateHasChanged();
    }

    private void LimpiarDatos()
    {
        switch (moduloAux)
        {
            case "EmpresasTerceras":
                 TxtGeneralUno = "";
                 TxtGeneralDos = "";
                 TxtGeneralTres = "";
                 TxtGeneralCuatro = "";
                 TxtGeneralCinco = "";
                 TxtGeneralSeis = "";
                 TxtGeneralSiete = "";
                 TxtGeneralOcho = "";
                break;
        }
        StateHasChanged();
    }

    private void FuncionesPrincipales()
    {
        switch (moduloAux)
        {
            case "EmpresasTerceras":

                if (opcAux == "Buscar")
                {
                    CargarTitulos();

                    using (HaliabdContext db = new HaliabdContext())
                    {
                        List<EmpresasTercera> empresasTercerasList = db.EmpresasTerceras.Where(s => s.NombreComercial.Contains(filter)).ToList();

                        rows.Clear(); // Limpiamos la lista antes de agregar nuevos datos

                        foreach (var item in empresasTercerasList)
                        {
                            List<object> fila = new List<object>();
                            fila.Add(item.EmpresasTercerasId);
                            fila.Add(item.Nombre);
                            fila.Add(item.NombreComercial);
                            fila.Add(item.Ruc);
                            fila.Add(item.Dirección);
                            fila.Add(item.Telefono);

                            rows.Add(fila);
                        }
                    }
                }
                else if (opcAux == "Crear")
                {
                    if (Validaciones())
                    {
                        using(HaliabdContext db = new HaliabdContext())
                        {
                                EmpresasTercera empresasTercera = new EmpresasTercera()
                                {
                                    Nombre = TxtGeneralUno.Trim(),
                                    NombreComercial = TxtGeneralDos.Trim(),
                                    Ruc = TxtGeneralTres.Trim(),
                                    Dirección = TxtGeneralCuatro.Trim(),
                                    Telefono = TxtGeneralCinco.Trim(), 
                                };   

                            db.Add(empresasTercera);
                            db.SaveChanges();
                        }
                    }

                     ConfigUI(moduloAux, "Buscar");
                }
                else if (opcAux == "Modificar")
                {
                    using (HaliabdContext db = new HaliabdContext())
                    {
                        // Retrieve the existing EmpresasTercera entity from the database
                        EmpresasTercera empresaTercera = db.EmpresasTerceras.Find(selectedEntryId);

                        if (empresaTercera != null)
                        {
                            // Update the entity with the new values
                            empresaTercera.Nombre = TxtGeneralUno.Trim();
                            empresaTercera.NombreComercial = TxtGeneralDos.Trim();
                            empresaTercera.Ruc = TxtGeneralTres.Trim();
                            empresaTercera.Dirección = TxtGeneralCuatro.Trim();
                            empresaTercera.Telefono = TxtGeneralCinco.Trim(); 

                            // Save the changes to the database
                            db.SaveChanges();
                        }
                    }
                    
                    ConfigUI(moduloAux, "Buscar");
                }

                break;
        }
        StateHasChanged();
    }

    private bool Validaciones()
    {
        switch (moduloAux)
        {
            case "EmpresasTerceras":

                if(TxtGeneralUno.Trim().Length == 0)
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "Debe digitar el nombre de la empresa.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                        return false;
                }

                if (TxtGeneralDos.Trim().Length == 0)
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "Debe digitar el nombre comercial de la empresa.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                        return false;
                }

                return true;
        }

        return false;
    }

    private void CargarTitulos()
    {
        switch (moduloAux)
        {
            case "EmpresasTerceras":
                headers = new List<string>() {"Clave","Nombre","Nombre Comercial","RUC","Dirección","Telefono"};
                break;
        }

        StateHasChanged();
    }

   private async Task UpdateEntry(List<object> entryId)
   {

        selectedEntryId = Convert.ToInt32(entryId[0]);

        await ConfigUI(moduloAux, "Modificar");
    }
}