@inject IcatalogService catalogService
@inject NavigationManager NavigationManager

@using NovaLaundryAppWebAdminBlazor.ModelsHalia;


<div class="popup-section">
    <div class="modal-content product">
        <span class="close" @onclick="ClosePopup">&times;</span>
        <h2>Crear Nuevo Producto</h2>

        <form @onsubmit="SaveProduct">
            @if(currentPage == 1)
            {
                <label for="name">Nombre</label>
                <input type="text" id="name" name="name" @bind="productName" required>

                <label for="code">Codigo</label>
                <input type="text" id="code" name="code" @bind="code">

                <label for="description">Descripción</label>
                <input type="text" id="description" name="description" @bind="description">

                <label for="price">Precio</label>
                <input type="text" id="price" name="price" @bind="productPrice">

                <button type="button" @onclick="GoToNextPage">Siguiente</button>
            }
            else if(currentPage == 2)
            {
                <div class="category-selection form">
                    <p>Asociar Categorías</p>
                    <div class="search-container form">
                        <form class="search-form">
                            <input @bind="@filter" class="search-input" type="text" name="q" placeholder="Buscar Categorias...">
                            <button class="search-button" type="submit"><span class="hide-text"></span><img src="/Search.png" alt="Logo" class="search-icon"></button>
                        </form>
                    </div>
                    @foreach (var category in DataCategories)
                    {
                        <div class="category-item">
                            <input type="checkbox" id="category_@category[0]" @onclick="() => ToggleCategorySelection(category[0].ToString())" />
                            <label for="category_@category[0]">@category[1]</label>
                        </div>
                    }
                </div>

                <div class="category-selection form">
                    <p>Asociar Proveedores</p>
                    <div class="search-container form">
                        <form class="search-form">
                            <input @bind="@filter" class="search-input" type="text" name="q" placeholder="Buscar Proveedores...">
                            <button class="search-button" type="submit"><span class="hide-text"></span><img src="/Search.png" alt="Logo" class="search-icon"></button>
                        </form>
                    </div>
                    @foreach (var provider in DataProviders)
                    {
                        <div class="category-item">
                            <input type="checkbox" id="category_@provider[0]" @onclick="() => ToggleProviderSelection(provider[0].ToString())" />
                            <label for="category_@provider[0]">@provider[1]</label>
                        </div>
                    }
                </div>

                <div class="category-selection form">
                    <p>Asociar a Lineas de Productos</p>
                    <div class="search-container form">
                        <form class="search-form">
                            <input @bind="@filter" class="search-input" type="text" name="q" placeholder="Buscar Lineas...">
                            <button class="search-button" type="submit"><span class="hide-text"></span><img src="/Search.png" alt="Logo" class="search-icon"></button>
                        </form>
                    </div>
                    @foreach (var line in DataLines)
                    {
                        <div class="category-item">
                            <input type="checkbox" id="category_@line[0]" @onclick="() => ToggleLineSelection(line[0].ToString())" />
                            <label for="category_@line[0]">@line[1]</label>
                        </div>
                    }
                </div>

                <div class="btns-section">
                    <button type="button" @onclick="GoToPreviousPage">Atrás</button>
                    <button class="saveProductoTercero" type="submit">Guardar</button>
                </div>
            }
        </form>
    </div>
</div>

@code 
{
    [Parameter]
    public EventCallback OnSave { get; set; }
    private int currentPage = 1;
    
    // Define fields to bind with input elements
    private string productName;
    private decimal productPrice;
    private string code;
    private string description;
    private string filter = "";
    private List<List<object>> DataCategories = new List<List<object>>();
    private List<List<object>> DataProviders = new List<List<object>>();
    private List<List<object>> DataLines = new List<List<object>>();
    private List<string> selectedCategoryIds = new List<string>();
    private List<string> selectedProviderIds = new List<string>();
    private List<string> selectedLineIds = new List<string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategoriesData();
            await LoadProvidersData();
            await LoadLinesData();
        }

        StateHasChanged();
    }

    private async Task LoadCategoriesData()
    {
        DataCategories.Clear();

        List<List<object>> data = await catalogService.GetCategoryAsync(filter);
        
        foreach (var rowData in data)
        {
            DataCategories.Add(rowData);
        }
    }

    private async Task LoadLinesData()
    {
        DataLines.Clear();

        List<List<object>> data = await catalogService.GetProductLineAsync(filter);
        
        foreach (var rowData in data)
        {
            DataLines.Add(rowData);
        }
    }

    private async Task LoadProvidersData()
    {
        DataProviders.Clear();

        List<List<object>> data = await catalogService.GetProviderAsync(filter);

        foreach (var rowData in data)
        {
            DataProviders.Add(rowData);
        }
    }

    private async void ToggleCategorySelection(string categoryId)
    {
        if (selectedCategoryIds.Contains(categoryId))
            selectedCategoryIds.Remove(categoryId);
        else
            selectedCategoryIds.Add(categoryId);
    }

    private async void ToggleProviderSelection(string providerId)
    {
        if (selectedProviderIds.Contains(providerId))
            selectedProviderIds.Remove(providerId);
        else
            selectedProviderIds.Add(providerId);
    }

    private async void ToggleLineSelection(string lineId)
    {
        if (selectedLineIds.Contains(lineId))
            selectedLineIds.Remove(lineId);
        else 
            selectedLineIds.Add(lineId);
    }

    public async Task ClosePopup() 
    {
        await OnSave.InvokeAsync();
    }
    
    private async Task SaveProduct()
    {
        Producto newProduct = new Producto
        {
            NombreProducto = productName,
            Precio = productPrice,
            CodigoProducto = code,
            Descripcion = description
        };

        await catalogService.AddProductAsync(newProduct);

        int productId = newProduct.ProductoId;

        foreach (string id in selectedCategoryIds.Concat(selectedLineIds).Concat(selectedProviderIds))
        {
            int IdInt = Convert.ToInt32(id);

            if (selectedCategoryIds.Contains(id))
                await catalogService.AddProductCategoryAsync(productId, IdInt);
            else if (selectedLineIds.Contains(id))
                await catalogService.AddProductProductLineAsync(productId, IdInt);
            else if (selectedProviderIds.Contains(id))
                await catalogService.AddProductProviderAsync(productId, IdInt);
        }


        await OnSave.InvokeAsync();
    }

    private void GoToNextPage()
    {
        currentPage = 2;
    }

    private void GoToPreviousPage()
    {
        currentPage = 1;
    }
}