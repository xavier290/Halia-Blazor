@page "/tools/sucursales";

@using Blazored.LocalStorage;

@inject IToolsService ToolsService;
@inject NavigationManager NavigationManager;

<PageTitle>Halia || Sucursales</PageTitle>

<!--Buscador-->
<div class="main-container">
    <!-- Botón Volver -->
    <button @onclick="Comeback" class="btn-volver" type="button">Volver</button>

    <!--Search+Button-->
    <div class="search-container">
        <form @onsubmit="LoadData" class="search-form">
            <input @bind="@filter" class="search-input" type="text" name="q" placeholder="Buscar...">
            <button class="search-button" type="submit"><span class="hide-text">Buscar </span><img src="/Search.png" alt="Logo" class="search-icon"></button>
            <button @onclick="OpenPopupCreate" class="create-button" type="button">Crear <img src="/Create.png" alt="Logo" class="create-icon"></button>
        </form>
    </div>

    <!--Tabla-->
    <div class="table-container thirdparties-cnt">
        <table class="table">
            <thead>
                <tr>
                    <th class="actions-row">Acciones</th>
                    @foreach (var header in headers)
                    {
                        <th>@header</th>
                    }
                </tr>
            </thead> 
            <tbody>
                @foreach (var row in rows)
                {
                    <tr>
                        <td class="actions-btns">
                            <button @onclick="() => OpenPopupEdit(row)" class="action-button update">Actualizar</button>
                            <button @onclick="() => BlockItem(row)" data-bs-toggle="modal" data-bs-target="#BloquearElementoBranch" class="action-button block">Bloquear</button>
                        </td>
                        @foreach (var cell in row)
                        {
                            <td>@cell</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @if (showPopup && !editMode)
    {
        <NovaLaundryAppWebAdminBlazor.Pages.Components.tools.CRUD.CreateBranch OnSave="HandleSave" />
    }
    else if (showPopup && editMode)
    {
        <NovaLaundryAppWebAdminBlazor.Pages.Components.tools.CRUD.UpdateBranch OnSave="HandleSave" SelectedItemId="@entryId" />
    }

    <div class="modal fade" id="BloquearElementoBranch" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Bloquear Elemento</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    ¿Estás seguro de que deseas bloquear el elemento seleccionado?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    <button @onclick="BlockItemFunction" type="button" class="btn btn-danger" data-bs-dismiss="modal">
                        <span aria-hidden="true"></span> Bloquear
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


@code {
    List<string> headers = new List<string>() {"Clave","Nombre","Dirección","Telefono","Correo"};
    List<List<object>> rows = new List<List<object>>();
    private bool showPopup = false;
    private bool editMode = false;
    private int entryId;
    private int EmpresaId;
    string filter = "";

    [Inject]
    protected ILocalStorageService _localStorage { get; set; }
    private async Task HandleSave()
    {
        // Optionally, perform any logic after saving
        showPopup = false; // Close the popup window
        LoadData(); // Reload data after saving
    }

    private void OpenPopupCreate()
    {
        showPopup = true;
        editMode = false;
    }

    private async Task BlockItem(List<object> Id)
    {
        entryId = Convert.ToInt32(Id[0]);
    }

    private async Task BlockItemFunction()
    {
        await ToolsService.BlockBranchAsync(entryId);
        await LoadData();
    }

    private async Task OpenPopupEdit(List<object> Id)
    {
        entryId = Convert.ToInt32(Id[0]);
        showPopup = true;
        editMode = true;
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            @* LoadTitles(); *@
            await LoadData();
        }

        StateHasChanged();
    }

    private async Task LoadData()
    {
        rows.Clear();
        var empresa = await _localStorage.GetItemAsync<string>("empresaId");
        EmpresaId = Int32.Parse(empresa);

        List<List<object>> dataProducts = await ToolsService.GetBranchesAsync(filter, EmpresaId);

        foreach (var rowData in dataProducts)
        {
            rows.Add(rowData);
        }
    }

    private async Task Comeback()
    {
        NavigationManager.NavigateTo("/tools");
    }
}