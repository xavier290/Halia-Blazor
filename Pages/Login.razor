@page "/"
@using System;
@using System.Linq;
@using Microsoft.EntityFrameworkCore;
@using Microsoft.Extensions.Hosting;
@using NovaLaundryAppWebAdminBlazor.Server.Services
@using NovaLaundryAppWebAdminBlazor.Server.ViewModels
@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager nav
@inject ProtectedLocalStorage localStorage
@using Blazored.Toast
@using Blazored.Toast.Services


<PageTitle>Halia || Inicio de Sesión</PageTitle>

<div class="mainLoginCnt">
    <div class="loginCnt">
        <div class="imgCntLogin">
            <!-- Image Section -->
            <img class="logo" src="/Logo112.png" alt="Halia Logo Salon de Belleza">
            <div class="cnt">
                <img class="logo-phone" src="/Logo103.png" alt="Halia Logo Salon de Belleza">
            </div>
        </div>

        <!-- Form Section -->
        <div class="loginFormCnt">
            <form @onsubmit="HandleLogin">
                <h1>Inicio de Sesión</h1>
                <div class="input">
                    <label style="margin:0.5rem 0 0.5rem 0" for="username">Usuario</label>
                    <input type="text" id="username" @bind="_user" class="form-control" style="padding: 0.28rem 0.75rem " placeholder="Nombre de Usuario" required />
                </div>
                <div class="input">
                    <label style="margin:0.5rem 0 0.5rem 0" for="password">Contraseña</label>
                    <input type="@(_showPassword ? "text" : "password")" class="form-control" id="password" style="padding: 0.28rem 0.75rem ;" @bind="@_password" placeholder="Contraseña" required/>
                </div>             
                <button style="margin-top:0.8rem; width: 100%" type="submit" class="btn btn-primary">Iniciar Sesión</button>
            </form>
        </div>
    </div>
</div>

@code {
    private string _user { get; set; } = "";
    private string _password { get; set; } = "";
    private bool _showPassword { get; set; } = false;
    private bool _acceder { get; set; }



    private async void HandleLogin()
    {
        try
        {
            using (SystemAdminContext db = new SystemAdminContext())
            {
                if (_user == "" && _password == "")
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "No ha digitado sus credenciales.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                if (_user == "")
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "Debe agregar un nombre de usuario para acceder.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                if (_password == "")
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "Debe agregar una contraseña para acceder.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                //Validaciones de Base

                //VerificarCredenciales

                Usuario usuario = db.Usuarios.Where(s => s.Nombre == _user && s.Pass == _password).FirstOrDefault();

                if (usuario == null)
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "las credenciales digitadas no pertenecen a ningún usuario.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }
                else
                {
                    Sucursale sucursal = db.Sucursales.Where(s => s.SucursalId == usuario.SucursalId).FirstOrDefault();

                    if (sucursal != null)
                    {

                        await localStorage.SetAsync("user", usuario.PrimerNombre+" "+usuario.PrimerApellido);
                        await localStorage.SetAsync("userId",usuario.IdUsuarios);
                        await localStorage.SetAsync("sucursalId",usuario.SucursalId.ToString());

                        if(usuario.Estado == "Bloqueado")
                        {
                            _ = Swal.FireAsync(new SweetAlertOptions
                                {
                                    Title = "Atención",
                                    Text = "Su usuario ha sido bloqueado.",
                                    Icon = SweetAlertIcon.Warning,
                                    ConfirmButtonText = "Ok",
                                    CancelButtonText = "Volver"
                                });
                        }

                        nav.NavigateTo("MenuPrincipal", true);
                    }
                    else
                    {
                        _ = Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Atención",
                                Text = "El usuario no tiene una sucursal relacionada.",
                                Icon = SweetAlertIcon.Warning,
                                ConfirmButtonText = "Ok",
                                CancelButtonText = "Volver"
                            });
                    }
                }


            }
        }
        catch (Exception ex)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error de servidor. Error:{ex.Message}",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Ok",
                    CancelButtonText = "Volver"
                });
        }
    }
}