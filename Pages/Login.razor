@page "/"
@using Microsoft.Extensions.Hosting;
@using NovaLaundryAppWebAdminBlazor.Server.Services
@using NovaLaundryAppWebAdminBlazor.Server.ViewModels
@inject IToastService toastService
@inject SweetAlertService Swal
@inject NavigationManager nav
@inject ProtectedLocalStorage localStorage
@using Blazored.Toast
@using Blazored.Toast.Services


<PageTitle>Halia || Inicio de Sesión</PageTitle>

<div class="mainLoginCnt">
    <div class="loginCnt">
        <div class="imgCntLogin">
            <!-- Image Section -->
            <img src="/Logo112.png" alt="Halia Logo Salon de Belleza">
        </div>

        <!-- Form Section -->
        <div class="loginFormCnt">
            <form @onsubmit="HandleLogin">
                <h1 style="margin-bottom:0.8rem; font-size: 2.2em">Inicio de Sesión</h1>
                <div class="input">
                    <label style="margin:0.5rem 0 0.5rem 0" for="username">Usuario</label>
                    <input type="text" id="username" @bind="_user" class="form-control" style="padding: 0.28rem 0.75rem " placeholder="Nombre de Usuario" required />
                </div>
                <div class="input">
                    <label style="margin:0.5rem 0 0.5rem 0" for="password">Contraseña</label>
                    <input type="@(_showPassword ? "text" : "password")" class="form-control" id="password" style="padding: 0.28rem 0.75rem ;" @bind="@_password" placeholder="Contraseña" required/>
                </div>
                <div class="form-group">
                    <label style="margin:0.5rem 0 0.5rem 0" for="CmbEmpresa" class="form-label">Empresa</label>
                    <InputSelect style="padding: 0.28rem 0.75rem" id="CmbEmpresa" class="form-select" @bind-Value="@_idEmpresa" @onclick="@(async () => await CambioEmpresa())">
                        <option value="0">- Seleccione una empresa -</option>
                            @foreach (var item in empresas)
                            {
                                <option value="@item.EmpresaId">@item.NombreComercial</option>
                            }
                    </InputSelect>
                </div>
                <div class="form-group">
                    <label style="margin:0.5rem 0 0.5rem 0" for="CmbSucursales" class="form-label">Sucursales</label>
                    <InputSelect style="padding: 0.28rem 0.75rem" id="CmbSucursales" class="form-select" @bind-Value="@_idSucursal" @onchange="async () => await CambioEmpresa()">
                        <option value="0">@(_idEmpresa == 0 ? "- Sin empresa -" : " Seleccione una sucursal ")</option>
                            @foreach (var item in sucursales)
                            {
                            <option value="@item.SucursalId">@item.NombreSucursal</option>
                            }
                    </InputSelect>
                 </div>
                <button style="margin-top:0.8rem; width: 100%" type="submit" class="btn btn-primary">Iniciar Sesión</button>
            </form>
        </div>
    </div>
</div>

@if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}


@code {
    private string _user { get; set; } = "";
    private string _password { get; set; } = "";
    private bool _showPassword { get; set; } = false;
    private string ErrorMessage { get; set; }
    private bool _acceder { get; set; }
    private List<Empresa> empresas = new List<Empresa>();
    private List<Sucursale> sucursales = new List<Sucursale>();
    private int _idEmpresa { get; set; } = 0;
    private int _idSucursal { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            using (SystemAdminContext db = new SystemAdminContext())
            {
                empresas = db.Empresas.Where(s => s.EstatusId == "Activo").ToList();
            }
        }
    }

    private async Task CambioEmpresa()
    {
        try
        {
            if (_idEmpresa != 0)
            {
                using (SystemAdminContext db = new SystemAdminContext())
                {
                    sucursales = db.Sucursales.Where(s => s.EmpresaId == _idEmpresa).ToList();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle any exceptions that may occur during data loading
            Console.WriteLine($"Error loading sucursales: {ex.Message}");
        }
    }

    private async void HandleLogin()
    {
        try
        {
            using (SystemAdminContext db = new SystemAdminContext())
            {
                if (_user == "" && _password == "")
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "No ha digitado sus credenciales.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                if (_user == "")
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "Debe agregar un nombre de usuario para acceder.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                if (_password == "")
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "Debe agregar una contraseña para acceder.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                if (_idEmpresa == 0)
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "No ha seleccionado una empresa.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                if (_idSucursal == 0)
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "No ha seleccionado una sucursal.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }

                //Validaciones de Base

                //VerificarCredenciales

                Usuario usuario = db.Usuarios.Where(s => s.Nombre == _user && s.Pass == _password).FirstOrDefault();

                if (usuario == null)
                {
                    _ = Swal.FireAsync(new SweetAlertOptions
                        {
                            Title = "Atención",
                            Text = "las credenciales digitadas no pertenecen a ningún usuario.",
                            Icon = SweetAlertIcon.Warning,
                            ConfirmButtonText = "Ok",
                            CancelButtonText = "Volver"
                        });

                    return;
                }
                else
                {
                    RelUsuarioSucursale relUsuarioEmpresa = db.RelUsuarioSucursales.Where(s => s.SucursalId == _idEmpresa && s.UsuariId == usuario.IdUsuarios).FirstOrDefault();

                    if (relUsuarioEmpresa != null)
                    {

                        localStorage.SetAsync("user", usuario.PrimerNombre+" "+usuario.PrimerApellido);
                        localStorage.SetAsync("userId",usuario.IdUsuarios);
                        localStorage.SetAsync("sucursalId", _idSucursal.ToString());
                        localStorage.SetAsync("empresaId", _idEmpresa.ToString());

                        nav.NavigateTo("MenuPrincipal", true);
                    }
                    else
                    {
                        _ = Swal.FireAsync(new SweetAlertOptions
                            {
                                Title = "Atención",
                                Text = "El usuario no tiene acceso a esa empresa.",
                                Icon = SweetAlertIcon.Warning,
                                ConfirmButtonText = "Ok",
                                CancelButtonText = "Volver"
                            });
                    }
                }


            }
        }
        catch (Exception ex)
        {
            _ = Swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error de servidor. Error:{ex.Message}",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "Ok",
                    CancelButtonText = "Volver"
                });
        }
    }
}